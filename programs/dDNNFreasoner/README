0. INSTALLATION

Compiling this software requires the following programs and libraries:
  1. A C++ compiler compatible with C++-14 language.
  2. The GNU MP library and its C++ headers (libgmp, libgmpxx).
  3. The GNU Make building utility.

In many cases, you just have to execute the "./configure" script and the "make" utility to build query-dnnf.
See INSTALL file for more information.


1. INTRODUCTION

This software allows one to manipulate files in the d-DNNF format, as defined
in [1]. It allows one to manipulate d-DNNF graphs so as to perform the
following:
- count models
- condition a graph with a partial model
- compute a valid model
- give weights to literals in the graph


2. USING THE SOFTWARE

When running the program, the user is faced with a prompt:

>

The following command are available:

cond [partial model] - conditions the graph according to partial model
h - displays current help
help - displays current help
load filename - loads a graph from file
mc [partial model] - count models
model [partial model] - display a valid model, if any
nodes - display number of nodes
p - prints graph on standard output in d-DNNF format
q - quits program
store filename - saves graph in d-DNNF format in filename
vars - display number of vars
w filename - loads weighs from file

The first thing to do is to load a graph stored in a d-DNNF file:

> load file.nnf

The file is then loaded, parsed and compressed. This operation can take some
time, as the compression and information extraction is not trivial.

Once it is parsed, the user can perform queries on the graph.


2.1 Counting models

To compute the number of models in the graph, one can call the 'mc' command:

> mc
768

The software then displays the number of models. It is also possible to provide
a partial model with the 'mc' command. For instance, if one wants to know the
number of models considering literal 1 is false and literal 2 is true, he
can run the following command:

> mc -1 2
256


2.2 Getting a valid model

To get a model for the graph in DIMACS format, one can call the 'model' command.
As the 'mc' command, it can be provided with a partial model:

> model -1 2
-1 2 -3 -4 -5 -6 -7 -8 -9 -10 0


2.3 Weighting literals

It is possible to weight literals in the graph, using the 'w' command.
This command is taking a filename as an argument, parses the file and
associates each literal with its weight according to that file.

> w weights.w

Once literals are associated with weights, it is possible to call the 'mc'
command and get the corresponding, weighted model count.

> mc
8.019171e+24

The content of the .w should consist of 0 to 2*n lines, where n is the number
of variables in the original graph. On each line, a literal should be associated
with a decimal value, indicating the weight of that literal. If a literal is
not present in the file, it is associated with a default weight of 1. For
instance, if our graph has 4 variables, the following file content:

2 .3
-2 1.7
1 1.5
-1 1
-4 0.414

indicates that literal 1 should have a weight of 1.5, literal 2 a weight of 0.2,
literal -2 a weight of 1.8, literal -4 a weight of 0.414 and all other literals
(-1, 3, -3, 4) a weight of 1.


2.4 Conditioning a graph

It is possible to condition a graph, i.e to bind a set of literals, using the
'cond' command. It is used by providing it the bound literals. For instance,
to condition the graph so that 1 is false and 2 is true, one can call:

> cond -1 2

The graph is then modified accordingly.


2.5 Saving a conditionned graph

When a graph has been conditionned, it is possible to save it in a new d-DNNF
file using the 'store' command:

> store out.nnf

It is possible to store the content of the graph in another file even if no
conditionning was made. Please note that, although a non-conditionned graph is
equivalent to the graph that was originally loaded, there is no guarantee the
d-DNNF output will be exactly the same as the one that was provided in output,
since the software performs a few optimizations when loading graphs.
Although the structure of the output will not necessarily the same as the one in
input, both graphs will of course be functionally equivalent.


2.6 Miscellaneous

It is possible to know the total number of nodes in the graph using the 'nodes'
command.

> nodes
17

This value is not very useful by itself since it does not necessarily reflect
the number of nodes in the original d-DNNF file, but it can give a idea of how
much memory the current graph is using.

It is possible to know the number of variables in the graph (including free
variables) using the 'vars' command.

> vars
10

It is possible to print on the standard output a d-DNNF representation of the
graph using the 'p' command.

This is the representation that would be generated with the 'store'
command. Since such representations are often quite big, it is advised not to
call this command in an interactive session, but only in batch mode.



3. REFERENCES

[1] Adnan Darwiche: "The c2d compiler user manual". Technical report, UCLA, 2005.
